{"version":3,"file":"main.aea85cb96f056f689d08.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAUA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AADA;AAAA;AAAA;AAeA;AAxDA","sources":["webpack://alan-ui-library/./components/Button/Button.tsx"],"sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  className?: string;\n  buttonType?: \"default\" | \"primary\" | \"ghost\" | \"text\" | \"link\" | \"dashed\";\n  size?: \"small\" | \"middle\" | \"large\";\n  children: React.ReactNode | string;\n  shape?: \"default\" | \"circle\" | \"round\";\n};\n\nexport const Button = ({\n  className,\n  buttonType = \"default\",\n  size = \"middle\",\n  shape = \"default\",\n  children,\n  ...rest\n}: Props) => {\n  const height = React.useMemo(() => {\n    if (size === \"small\") return \"h-6\";\n    if (size === \"large\") return \"h-10\";\n    return \"h-8\";\n  }, [size]);\n\n  // color\n  const color = React.useMemo(() => {\n    if (buttonType === \"primary\") return \"text-white\";\n    if (buttonType === \"link\" || buttonType === \"ghost\") return \"text-primary\";\n    return \"text-txt-black\";\n  }, [buttonType]);\n  // background\n  const background = React.useMemo(() => {\n    if (buttonType === \"primary\") return \"bg-primary\";\n    return \"bg-transparent\";\n  }, [buttonType]);\n  // border\n  const border = React.useMemo(() => {\n    if (buttonType === \"primary\") return \"border border-primary\";\n    if (buttonType === \"ghost\") return \"border border-current\";\n    if (buttonType === \"dashed\") return \"border-dashed border-gray-4\";\n    if ([\"link\", \"text\"].includes(buttonType)) return \"border border-white\";\n    return \"border border-gray-4\";\n  }, [buttonType]);\n  // radius\n  const radius = React.useMemo(() => {\n    if (shape === \"circle\") return \"rounded-full\";\n    if (shape === \"round\") return \"rounded-round\";\n    return \"rounded-sm\";\n  }, [shape]);\n\n  return (\n    <button\n      className={cx(\n        \"px-2\",\n        height,\n        color,\n        background,\n        border,\n        radius,\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n"],"names":[],"sourceRoot":""}